from secrets import token_hex
from threading import Lock

class Identifier:
   """Collection of basic functions to provide unique identifiers.
   
   Generates unique identifiers for user-required lengths, maintains uniqueness
   by keeping track of active identifiers and allows identification of owner
   of identifier by maintaining generator-specified str.
   
   Attributes
   ----------
   identity_active : dict
      Set of all currently active identifiers with identifier->owner mapping.
   
   Methods
   -------
   _generate ()
      Generates unique identifier of specified length.
   generate ()
      Generates unique identifier and maps to owner str provided.
   delete ()
      Deletes the specified identifier and its mapping.
   identify ()
      Returns owner str for the specified identifier, if active.
   """
   
   identity_active       = dict() # id -> owner
   
   _lock_identity_active = Lock()
   
   def _generate (identifier_length=16):
      """Generates unique identifier of specified length.
      
      Generates unique identifiers using token_hex function of secrets modules.
      
      Parameters
      ----------
      identifier_length : int, default=16
         Length of identifier to generate.
      
      Returns
      -------
      str
         Returns unique identifier.
      """
      
      identifier = None
      
      Identifier._lock_identity_active.acquire()
      
      try:
         while ((not identifier)
            or (identifier in Identifier.identity_active.keys())
         ):
            identifier = token_hex(identifier_length)
      finally:
         Identifier._lock_identity_active.release()
      
      return identifier
   
   def generate (owner, identifier_length=16):
      """Generates unique identifier and maps to owner str provided.
      
      Generates unique identifiers and stores identifier -> owner mapping
      for later use until deleted.
      
      Parameters
      ----------
      owner : str
         Owner info, to be mapped with generated identifier.
      identifier_length : int, default=16
         Length of identifier to generate.
      
      Returns
      -------
      str
         Returns unique identifier.
      """
      
      identifier = Identifier._generate(identifier_length=identifier_length)
      
      Identifier._lock_identity_active.acquire()
      
      try:
         Identifier.identity_active[identifier] = str(owner)
      finally:
         Identifier._lock_identity_active.release()
      
      return identifier
   
   def delete (identifier):
      """Deletes the specified identifier and its mapping.
      
      Deletes identifier mapping generated by generate function.
      
      Parameters
      ----------
      identifier : str
         Identifier to delete.
      
      Returns
      -------
      str
         Returns owner associated with (now deleted) identifier.
      bool
         Returns True if identifier mapping does not exist.
      """
      
      Identifier._lock_identity_active.acquire()
      
      try:
         if (identifier in Identifier.identity_active.keys()):
            try:
               owner = Identifier.identity_active.pop(identifier)
            except:
               owner = True
            
            return owner
      finally:
         Identifier._lock_identity_active.release()
      
      return True
   
   def identify (identifier):
      """Returns owner str for the specified identifier, if active.
      
      Searches for identifier mapping in identifier_active, generated by
      generate function, and returns owner details if found.
      
      Parameters
      ----------
      identifier : str
         Identifier to search for.
      
      Returns
      -------
      str
         Returns owner associated with the identifier.
      bool
         Returns False if identifier mapping does not exist.
      """
      
      result = None
      
      Identifier._lock_identity_active.acquire()
      
      try:
         result = Identifier.identifier_active.get(identifier, False)
      finally:
         Identifier._lock_identity_active.release()
      
      return result
